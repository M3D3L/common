[{"data":1,"prerenderedAt":60},["ShallowReactive",2],{"posts":3},{"page":4,"perPage":5,"totalItems":6,"totalPages":7,"items":8},1,5,6,2,[9,22,31,41,51],{"author":10,"collectionId":11,"collectionName":12,"content":13,"cover_image":14,"created":15,"description":16,"id":17,"slug":18,"sub_title":19,"tags":20,"title":21,"updated":15,"video":19},"eftdr8q9xuy4wkb","9so8yxx3gmfej2t","posts","\u003Ch2 data-sourcepos=\"5:1-5:99\">Creating a Design System in Nuxt 3 with Tailwind CSS and ShadUI\u003C/h2>\r\n\u003Cp data-sourcepos=\"9:1-9:293\">Today, we're going to dive deep into creating a robust and flexible design system using the powerful combination of Nuxt 3, Tailwind CSS, and ShadUI. This trifecta offers a developer-friendly experience, unparalleled customization, and a component library that's both beautiful and accessible.\u003C/p>\r\n\u003Ch3 data-sourcepos=\"11:1-11:41\">Why Nuxt 3, Tailwind CSS, and ShadUI?\u003C/h3>\r\n\u003Cp data-sourcepos=\"13:1-13:128\">Before we roll up our sleeves, let's understand why this particular stack is a winning combination for building a design system:\u003C/p>\r\n\u003Cul data-sourcepos=\"15:1-18:0\">\r\n\u003Cli data-sourcepos=\"15:1-15:308\">\u003Cstrong>Nuxt 3:\u003C/strong> As a full-stack framework for Vue.js, Nuxt 3 provides a fantastic development experience with features like file-based routing, auto-imports, and server-side rendering (SSR) or static site generation (SSG). Its modular architecture makes it ideal for organizing and integrating a design system.\u003C/li>\r\n\u003Cli data-sourcepos=\"16:1-16:416\">\u003Cstrong>Tailwind CSS:\u003C/strong> This utility-first CSS framework empowers you to build designs directly in your markup without writing custom CSS. Its highly customizable nature means you can precisely define your design tokens (colors, spacing, typography, etc.) and apply them consistently across your application. The \"constraints, not opinions\" philosophy of Tailwind aligns perfectly with the principles of a design system.\u003C/li>\r\n\u003Cli data-sourcepos=\"17:1-18:0\">\u003Cstrong>ShadUI:\u003C/strong> While Tailwind provides the low-level utility classes, ShadUI (or similar headless UI libraries) offers beautifully designed, accessible, and unstyled components that you can fully theme with Tailwind CSS. This gives you the best of both worlds: pre-built, high-quality UI elements without the burden of overriding opinionated styles. It acts as a fantastic foundation for your design system's component library.\u003C/li>\r\n\u003C/ul>\r\n\u003Ch3 data-sourcepos=\"19:1-19:41\">The Core Pillars of Our Design System\u003C/h3>\r\n\u003Cp data-sourcepos=\"21:1-21:197\">A successful design system isn't just a collection of components; it's a living document that defines your brand's visual language and interaction patterns. Here are the key pillars we'll focus on:\u003C/p>\r\n\u003Col data-sourcepos=\"23:1-27:0\">\r\n\u003Cli data-sourcepos=\"23:1-23:197\">\u003Cstrong>Design Tokens:\u003C/strong> The atomic elements of your design system, such as colors, typography scales, spacing units, border radii, and shadows. These are directly mapped to Tailwind's configuration.\u003C/li>\r\n\u003Cli data-sourcepos=\"24:1-24:169\">\u003Cstrong>Components:\u003C/strong> Reusable UI elements built with Nuxt 3, styled with Tailwind CSS, and potentially leveraging ShadUI for their underlying structure and accessibility.\u003C/li>\r\n\u003Cli data-sourcepos=\"25:1-25:199\">\u003Cstrong>Documentation:\u003C/strong> Clear guidelines and examples for how to use the design tokens and components, ensuring consistency across teams and projects. This is crucial for adoption and maintainability.\u003C/li>\r\n\u003Cli data-sourcepos=\"26:1-27:0\">\u003Cstrong>Tooling &amp; Automation:\u003C/strong> Setting up development workflows, build processes, and potentially automated accessibility checks to streamline the design system's evolution.\u003C/li>\r\n\u003C/ol>\r\n\u003Ch3 data-sourcepos=\"28:1-28:45\">Step-by-Step: Building Your Design System\u003C/h3>\r\n\u003Cp data-sourcepos=\"30:1-30:75\">Let's get practical! Here's a guided tour to setting up your design system.\u003C/p>\r\n\u003Ch4 data-sourcepos=\"32:1-32:28\">1. Nuxt 3 Project Setup\u003C/h4>\r\n\u003Cp data-sourcepos=\"34:1-34:73\">If you don't have a Nuxt 3 project already, let's start with a fresh one:\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>Bash\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-62 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-62 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"36:1-40:11\">npx nuxi init my-design-system-app\r\ncd my-design-system-app\r\nnpm install\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Ch4 data-sourcepos=\"42:1-42:32\">2. Integrating Tailwind CSS\u003C/h4>\r\n\u003Cp data-sourcepos=\"44:1-44:79\">Nuxt 3 makes integrating Tailwind CSS a breeze. Install the necessary packages:\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>Bash\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-63 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-63 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"46:1-48:34\">npm install -D @nuxtjs/tailwindcss\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cp data-sourcepos=\"50:1-50:38\">Then, add it to your \u003Ccode>nuxt.config.ts\u003C/code>:\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>TypeScript\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-64 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-64 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"52:1-64:2\">// nuxt.config.ts\r\n\u003Cspan class=\"hljs-keyword\">export\u003C/span> default defineNuxtConfig({\r\n  \u003Cspan class=\"hljs-attr\">modules\u003C/span>: [\r\n    '@nuxtjs/tailwindcss'\r\n  ],\r\n  \u003Cspan class=\"hljs-attr\">tailwindcss\u003C/span>: {\r\n    cssPath: \u003Cspan class=\"hljs-string\">'~/assets/css/tailwind.css'\u003C/span>, // Optional: for custom base styles\r\n    \u003Cspan class=\"hljs-attr\">configPath\u003C/span>: 'tailwind.config.js',\r\n    \u003Cspan class=\"hljs-attr\">viewer\u003C/span>: true, \u003Cspan class=\"hljs-comment\">// Enable Tailwind CSS viewer for development\u003C/span>\r\n  },\r\n})\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cp data-sourcepos=\"66:1-66:107\">Create a \u003Ccode>tailwind.css\u003C/code> file in \u003Ccode>assets/css\u003C/code> if you want to include any base styles or \u003Ccode>@layer\u003C/code> directives:\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>CSS\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-65 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-65 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"68:1-73:20\">/* assets/css/tailwind.css */\r\n\u003Cspan class=\"hljs-keyword\">@tailwind\u003C/span> base;\r\n@tailwind components;\r\n\u003Cspan class=\"hljs-keyword\">@tailwind\u003C/span> utilities;\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cp data-sourcepos=\"75:1-75:37\">Initialize your \u003Ccode>tailwind.config.js\u003C/code>:\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>Bash\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-66 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-66 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"77:1-79:23\">npx tailwindcss init -p\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cp data-sourcepos=\"81:1-81:88\">Now you have a \u003Ccode>tailwind.config.js\u003C/code> file, which will be the heart of your design tokens.\u003C/p>\r\n\u003Ch4 data-sourcepos=\"83:1-83:25\">3. Installing ShadUI\u003C/h4>\r\n\u003Cp data-sourcepos=\"85:1-85:212\">ShadUI components are unstyled by default, making them perfect for styling with Tailwind CSS. Installation typically involves installing the \u003Ccode>@radix-ui/vue\u003C/code> primitives and a utility for \u003Ccode>cn\u003C/code> (class name utility).\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>Bash\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-67 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-67 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"87:1-89:87\">npm install -D @radix-ui/vue @nuxtjs/color-mode class-variance-authority tailwind-merge\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cp data-sourcepos=\"91:1-91:136\">You'll then want to configure \u003Ccode>color-mode\u003C/code> and add \u003Ccode>shadcn-vue\u003C/code> and \u003Ccode>ui\u003C/code> directories to your \u003Ccode>content\u003C/code> property in \u003Ccode>tailwind.config.js\u003C/code>.\u003C/p>\r\n\u003Cp data-sourcepos=\"93:1-93:223\">\u003Cstrong>Crucially, for ShadUI, you generally follow their installation guide which involves running a CLI command to add components.\u003C/strong> This command typically configures your \u003Ccode>tailwind.config.js\u003C/code> and sets up the necessary imports.\u003C/p>\r\n\u003Cp data-sourcepos=\"95:1-95:39\">For example, to add a button component:\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>Bash\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-68 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-68 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"97:1-99:25\">npx shadcn-vue add button\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cp data-sourcepos=\"101:1-101:24\">This command will often:\u003C/p>\r\n\u003Cul data-sourcepos=\"102:1-105:0\">\r\n\u003Cli data-sourcepos=\"102:1-102:70\">Add the \u003Ccode>Button\u003C/code> component to your \u003Ccode>components/ui/button\u003C/code> directory.\u003C/li>\r\n\u003Cli data-sourcepos=\"103:1-103:87\">Update your \u003Ccode>tailwind.config.js\u003C/code> to include the \u003Ccode>content\u003C/code> path for ShadUI components.\u003C/li>\r\n\u003Cli data-sourcepos=\"104:1-105:0\">Potentially add utility functions like \u003Ccode>cn\u003C/code> to \u003Ccode>lib/utils.ts\u003C/code>.\u003C/li>\r\n\u003C/ul>\r\n\u003Cp data-sourcepos=\"106:1-106:138\">\u003Cstrong>Important:\u003C/strong> Always refer to the official ShadUI documentation for the most up-to-date installation and component addition instructions.\u003C/p>\r\n\u003Ch4 data-sourcepos=\"108:1-108:59\">4. Defining Your Design Tokens in \u003Ccode>tailwind.config.js\u003C/code>\u003C/h4>\r\n\u003Cp data-sourcepos=\"110:1-110:115\">This is where your design system truly comes to life. Map your brand's visual identity to Tailwind's configuration.\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>JavaScript\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-69 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-69 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"112:1-210:1\">// tailwind.config.js\r\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> type { Config } from \u003Cspan class=\"hljs-string\">'tailwindcss'\u003C/span>\r\n\r\nexport \u003Cspan class=\"hljs-keyword\">default\u003C/span> &lt;Partial&lt;Config&gt;&gt;{\r\n  darkMode: \u003Cspan class=\"hljs-string\">'class'\u003C/span>, // Enable dark mode if desired\r\n  \u003Cspan class=\"hljs-attr\">theme\u003C/span>: {\r\n    container: {\r\n      \u003Cspan class=\"hljs-attr\">center\u003C/span>: true,\r\n      \u003Cspan class=\"hljs-attr\">padding\u003C/span>: '2rem',\r\n      \u003Cspan class=\"hljs-attr\">screens\u003C/span>: {\r\n        '2xl': \u003Cspan class=\"hljs-string\">'1400px'\u003C/span>,\r\n      },\r\n    },\r\n    extend: {\r\n      \u003Cspan class=\"hljs-attr\">colors\u003C/span>: {\r\n        border: \u003Cspan class=\"hljs-string\">'hsl(var(--border))'\u003C/span>,\r\n        input: \u003Cspan class=\"hljs-string\">'hsl(var(--input))'\u003C/span>,\r\n        ring: \u003Cspan class=\"hljs-string\">'hsl(var(--ring))'\u003C/span>,\r\n        background: \u003Cspan class=\"hljs-string\">'hsl(var(--background))'\u003C/span>,\r\n        foreground: \u003Cspan class=\"hljs-string\">'hsl(var(--foreground))'\u003C/span>,\r\n        primary: {\r\n          \u003Cspan class=\"hljs-attr\">DEFAULT\u003C/span>: 'hsl(var(--primary))',\r\n          \u003Cspan class=\"hljs-attr\">foreground\u003C/span>: 'hsl(var(--primary-foreground))',\r\n        },\r\n        \u003Cspan class=\"hljs-attr\">secondary\u003C/span>: {\r\n          DEFAULT: \u003Cspan class=\"hljs-string\">'hsl(var(--secondary))'\u003C/span>,\r\n          foreground: \u003Cspan class=\"hljs-string\">'hsl(var(--secondary-foreground))'\u003C/span>,\r\n        },\r\n        destructive: {\r\n          \u003Cspan class=\"hljs-attr\">DEFAULT\u003C/span>: 'hsl(var(--destructive))',\r\n          \u003Cspan class=\"hljs-attr\">foreground\u003C/span>: 'hsl(var(--destructive-foreground))',\r\n        },\r\n        \u003Cspan class=\"hljs-attr\">muted\u003C/span>: {\r\n          DEFAULT: \u003Cspan class=\"hljs-string\">'hsl(var(--muted))'\u003C/span>,\r\n          foreground: \u003Cspan class=\"hljs-string\">'hsl(var(--muted-foreground))'\u003C/span>,\r\n        },\r\n        accent: {\r\n          \u003Cspan class=\"hljs-attr\">DEFAULT\u003C/span>: 'hsl(var(--accent))',\r\n          \u003Cspan class=\"hljs-attr\">foreground\u003C/span>: 'hsl(var(--accent-foreground))',\r\n        },\r\n        \u003Cspan class=\"hljs-attr\">popover\u003C/span>: {\r\n          DEFAULT: \u003Cspan class=\"hljs-string\">\u003Cspan class=\"citation-3\">'hsl(var(--popover))'\u003C/span>\u003C/span>,\r\n          \u003Cspan class=\"hljs-attr\">\u003Cspan class=\"citation-3\">foreground\u003C/span>\u003C/span>: \u003Cspan class=\"hljs-string\">\u003Cspan class=\"citation-3\">'hsl(var(--popover-foreground))'\u003C/span>\u003C/span>,\r\n        },\r\n        \u003Cspan class=\"hljs-attr\">\u003Cspan class=\"citation-3\">card\u003C/span>\u003C/span>: {\r\n          \u003Cspan class=\"hljs-attr\">\u003Cspan class=\"citation-3\">DEFAULT\u003C/span>\u003C/span>: \u003Cspan class=\"hljs-string\">\u003Cspan class=\"citation-3\">'hsl(var(--card))'\u003C/span>\u003C/span>,\r\n          \u003Cspan class=\"hljs-attr\">\u003Cspan class=\"citation-3\">foreground\u003C/span>\u003C/span>: \u003Cspan class=\"hljs-string\">\u003Cspan class=\"citation-3\">'hsl(var(--card-foreground))'\u003C/span>\u003C/span>,\r\n        },\r\n        \u003Cspan class=\"hljs-comment\">\u003Cspan class=\"citation-3 citation-end-3\">// Custom\u003C/span> brand colors\u003C/span>\r\n        'brand-primary': {\r\n          \u003Cspan class=\"hljs-attr\">DEFAULT\u003C/span>: '#6A0572', \u003Cspan class=\"hljs-comment\">// Example: Your brand's primary color\u003C/span>\r\n          50: \u003Cspan class=\"hljs-string\">'#F0D9F2'\u003C/span>,\r\n          100: \u003Cspan class=\"hljs-string\">'#E0BCE4'\u003C/span>,\r\n          // ... more shades\r\n        },\r\n        \u003Cspan class=\"hljs-string\">'brand-secondary'\u003C/span>: '#A5D6A7',\r\n        \u003Cspan class=\"hljs-comment\">// ... more custom colors\u003C/span>\r\n      },\r\n      borderRadius: {\r\n        \u003Cspan class=\"hljs-attr\">lg\u003C/span>: 'var(--radius)',\r\n        \u003Cspan class=\"hljs-attr\">md\u003C/span>: 'calc(var(--radius) - 2px)',\r\n        \u003Cspan class=\"hljs-attr\">sm\u003C/span>: 'calc(var(--radius) - 4px)',\r\n      },\r\n      \u003Cspan class=\"hljs-attr\">keyframes\u003C/span>: {\r\n        'accordion-down': {\r\n          \u003Cspan class=\"hljs-attr\">from\u003C/span>: { height: \u003Cspan class=\"hljs-string\">'0'\u003C/span> },\r\n          to: { \u003Cspan class=\"hljs-attr\">height\u003C/span>: 'var(--radix-accordion-content-height)' },\r\n        },\r\n        \u003Cspan class=\"hljs-string\">'accordion-up'\u003C/span>: {\r\n          from: { \u003Cspan class=\"hljs-attr\">height\u003C/span>: 'var(--radix-accordion-content-height)'\u003Cspan class=\"citation-2\"> },\r\n          \u003C/span>to\u003Cspan class=\"citation-2\">: { \u003C/span>height\u003Cspan class=\"citation-2\">: \u003C/span>'0'\u003Cspan class=\"citation-2\"> },\r\n        },\r\n      },\r\n      \u003C/span>animation\u003Cspan class=\"citation-2\">: {\r\n        \u003C/span>'accordion-down'\u003Cspan class=\"citation-2\">: \u003C/span>'accordion-down 0.2s ease-out'\u003Cspan class=\"citation-2\">,\r\n        \u003C/span>'accordion-up'\u003Cspan class=\"citation-2\">: \u003C/span>'accordion-up 0.2s ease-out'\u003Cspan class=\"citation-2\">,\r\n      },\r\n      \u003C/span>fontFamily\u003Cspan class=\"citation-2\">: {\r\n        \u003C/span>sans\u003Cspan class=\"citation-2\">: [\u003C/span>'Inter'\u003Cspan class=\"citation-2 citation-end-2\">,\u003C/span> 'sans-serif'], \u003Cspan class=\"hljs-comment\">// Example: Add your preferred font\u003C/span>\r\n        serif: [\u003Cspan class=\"hljs-string\">'Merriweather'\u003C/span>, 'serif'],\r\n        \u003Cspan class=\"hljs-attr\">mono\u003C/span>: ['Fira Code', \u003Cspan class=\"hljs-string\">'monospace'\u003C/span>],\r\n      },\r\n      spacing: {\r\n        \u003Cspan class=\"hljs-string\">'0.5'\u003C/span>: '0.125rem',\r\n        \u003Cspan class=\"hljs-string\">'1'\u003C/span>: '0.25rem',\r\n        \u003Cspan class=\"hljs-string\">'1.5'\u003C/span>: '0.375rem',\r\n        \u003Cspan class=\"hljs-comment\">// ... extend as needed for a robust spacing scale\u003C/span>\r\n      },\r\n      boxShadow: {\r\n        \u003Cspan class=\"hljs-string\">'soft-sm'\u003C/span>: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\r\n        \u003Cspan class=\"hljs-string\">'soft-md'\u003C/span>: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\r\n        \u003Cspan class=\"hljs-comment\">// ... define your custom shadows\u003C/span>\r\n      },\r\n    },\r\n  },\r\n  plugins: [\u003Cspan class=\"hljs-built_in\">require\u003C/span>('tailwindcss-animate')],\r\n}\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cp data-sourcepos=\"212:1-212:44\">\u003Cstrong>Explanation of the \u003Ccode>tailwind.config.js\u003C/code>:\u003C/strong>\u003C/p>\r\n\u003Cul data-sourcepos=\"214:1-223:0\">\r\n\u003Cli data-sourcepos=\"214:1-214:95\">\u003Cstrong>\u003Ccode>darkMode: 'class'\u003C/code>\u003C/strong>: Enables dark mode by toggling a \u003Ccode>dark\u003C/code> class on your \u003Ccode>html\u003C/code> element.\u003C/li>\r\n\u003Cli data-sourcepos=\"215:1-221:58\">\u003Cstrong>\u003Ccode>theme.extend\u003C/code>\u003C/strong>: This is where you define your custom design tokens.\r\n\u003Cul data-sourcepos=\"216:5-221:58\">\r\n\u003Cli data-sourcepos=\"216:5-216:265\">\u003Cstrong>\u003Ccode>colors\u003C/code>\u003C/strong>: Define your brand's color palette. ShadUI typically uses CSS variables for colors, making it easy to implement them in your \u003Ccode>globals.css\u003C/code> (or \u003Ccode>tailwind.css\u003C/code>). We've included examples for both ShadUI's default color setup and custom brand colors.\u003C/li>\r\n\u003Cli data-sourcepos=\"217:5-217:56\">\u003Cstrong>\u003Ccode>borderRadius\u003C/code>\u003C/strong>: Standardize your border radii.\u003C/li>\r\n\u003Cli data-sourcepos=\"218:5-218:61\">\u003Cstrong>\u003Ccode>keyframes\u003C/code> and \u003Ccode>animation\u003C/code>\u003C/strong>: For custom animations.\u003C/li>\r\n\u003Cli data-sourcepos=\"219:5-219:49\">\u003Cstrong>\u003Ccode>fontFamily\u003C/code>\u003C/strong>: Specify your brand fonts.\u003C/li>\r\n\u003Cli data-sourcepos=\"220:5-220:58\">\u003Cstrong>\u003Ccode>spacing\u003C/code>\u003C/strong>: Build out a consistent spacing scale.\u003C/li>\r\n\u003Cli data-sourcepos=\"221:5-221:58\">\u003Cstrong>\u003Ccode>boxShadow\u003C/code>\u003C/strong>: Define your standard shadow styles.\u003C/li>\r\n\u003C/ul>\r\n\u003C/li>\r\n\u003Cli data-sourcepos=\"222:1-223:0\">\u003Cstrong>\u003Ccode>plugins\u003C/code>\u003C/strong>: Include Tailwind plugins like \u003Ccode>tailwindcss-animate\u003C/code> (often used by ShadUI).\u003C/li>\r\n\u003C/ul>\r\n\u003Ch4 data-sourcepos=\"224:1-224:68\">5. Setting Up CSS Variables for ShadUI (and your custom colors)\u003C/h4>\r\n\u003Cp data-sourcepos=\"226:1-226:194\">For ShadUI's themeability, and often for your own custom colors, you'll use CSS variables. Create or modify your \u003Ccode>assets/css/tailwind.css\u003C/code> (or a \u003Ccode>globals.css\u003C/code> file imported into \u003Ccode>tailwind.css\u003C/code>):\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>CSS\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-70 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-70 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"228:1-297:1\">/* assets/css/tailwind.css */\r\n\u003Cspan class=\"hljs-keyword\">@\u003Cspan class=\"citation-1\">tailwind\u003C/span>\u003C/span> base;\r\n\u003Cspan class=\"hljs-keyword\">\u003Cspan class=\"citation-1\">@tailwind\u003C/span>\u003C/span> components;\r\n\u003Cspan class=\"hljs-keyword\">\u003Cspan class=\"citation-1\">@tailwind\u003C/span>\u003C/span> utilities;\r\n\r\n\u003Cspan class=\"hljs-keyword\">\u003Cspan class=\"citation-1\">@layer\u003C/span>\u003C/span> base {\r\n  \u003Cspan class=\"hljs-selector-pseudo\">\u003Cspan class=\"citation-1\">:root\u003C/span>\u003C/span> {\r\n    --\u003Cspan class=\"hljs-attribute\">\u003Cspan class=\"citation-1\">background\u003C/span>\u003C/span>: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">0\u003C/span>\u003C/span> 0% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">100%\u003C/span>\u003C/span>;\r\n    --foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 84% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">4.9%\u003C/span>\u003C/span>;\r\n\r\n    --card: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">0\u003C/span>\u003C/span> 0% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">100%\u003C/span>\u003C/span>;\r\n    --card-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 84% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">4.9%\u003C/span>\u003C/span>;\r\n\r\n    --popover: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">0\u003C/span>\u003C/span> 0% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">100%\u003C/span>\u003C/span>;\r\n    --popover-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 84% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">4.9%\u003C/span>\u003C/span>;\r\n\r\n    --primary: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 47.4% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">11.2%\u003C/span>\u003C/span>;\r\n    --primary-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">98%\u003C/span>\u003C/span>;\r\n\r\n    --secondary: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">96.1%\u003C/span>\u003C/span>;\r\n    --secondary-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 47.4% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">11.2%\u003C/span>\u003C/span>;\r\n\r\n    --muted: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">96.1%\u003C/span>\u003C/span>;\r\n    --muted-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">215.4\u003C/span>\u003C/span> 16.3% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">46.9%\u003C/span>\u003C/span>;\r\n\r\n    --accent: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">96.1%\u003C/span>\u003C/span>;\r\n    --accent-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 47.4% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">11.2%\u003C/span>\u003C/span>;\r\n\r\n    --destructive: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">0\u003C/span>\u003C/span> 84.2% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">60.2%\u003C/span>\u003C/span>;\r\n    --destructive-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">98%\u003C/span>\u003C/span>;\r\n\r\n    --\u003Cspan class=\"hljs-attribute\">\u003Cspan class=\"citation-1\">border\u003C/span>\u003C/span>: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">214.3\u003C/span>\u003C/span> 31.8% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">91.4%\u003C/span>\u003C/span>;\r\n    --\u003Cspan class=\"hljs-selector-tag\">\u003Cspan class=\"citation-1\">input\u003C/span>\u003C/span>: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">214.3\u003C/span>\u003C/span> 31.8% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">91.4%\u003C/span>\u003C/span>;\r\n    --ring: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 84% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">4.9%\u003C/span>\u003C/span>;\r\n\r\n    --radius: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">0.5rem\u003C/span>\u003C/span>;\r\n  }\r\n\r\n  \u003Cspan class=\"hljs-selector-class\">\u003Cspan class=\"citation-1\">.dark\u003C/span>\u003C/span> {\r\n    --\u003Cspan class=\"hljs-attribute\">\u003Cspan class=\"citation-1\">background\u003C/span>\u003C/span>: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 84% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">4.9%\u003C/span>\u003C/span>;\r\n    --foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">98%\u003C/span>\u003C/span>;\r\n\r\n    --card: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 84% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">4.9%\u003C/span>\u003C/span>;\r\n    --card-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">98%\u003C/span>\u003C/span>;\r\n\r\n    --popover: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 84% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">4.9%\u003C/span>\u003C/span>;\r\n    --popover-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">98%\u003C/span>\u003C/span>;\r\n\r\n    --primary: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">98%\u003C/span>\u003C/span>;\r\n    --primary-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">222.2\u003C/span>\u003C/span> 47.4% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">11.2%\u003C/span>\u003C/span>;\r\n\r\n    --secondary: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">217.2\u003C/span>\u003C/span> 32.6% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">17.5%\u003C/span>\u003C/span>;\r\n    --secondary-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">98%\u003C/span>\u003C/span>;\r\n\r\n    --muted: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">217.2\u003C/span>\u003C/span> 32.6% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">17.5%\u003C/span>\u003C/span>;\r\n    --muted-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">215\u003C/span>\u003C/span> 20.2% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">65.1%\u003C/span>\u003C/span>;\r\n\r\n    --accent: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">217.2\u003C/span>\u003C/span> 32.6% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">17.5%\u003C/span>\u003C/span>;\r\n    --accent-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">98%\u003C/span>\u003C/span>;\r\n\r\n    --destructive: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">0\u003C/span>\u003C/span> 62.8% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">30.6%\u003C/span>\u003C/span>;\r\n    --destructive-foreground: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">210\u003C/span>\u003C/span> 40% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">98%\u003C/span>\u003C/span>;\r\n\r\n    --\u003Cspan class=\"hljs-attribute\">\u003Cspan class=\"citation-1\">border\u003C/span>\u003C/span>: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">217.2\u003C/span>\u003C/span> 32.6% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">17.5%\u003C/span>\u003C/span>;\r\n    --\u003Cspan class=\"hljs-selector-tag\">\u003Cspan class=\"citation-1\">input\u003C/span>\u003C/span>: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">217.2\u003C/span>\u003C/span> 32.6% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">17.5%\u003C/span>\u003C/span>;\r\n    --ring: \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">212.7\u003C/span>\u003C/span> 26.8% \u003Cspan class=\"hljs-number\">\u003Cspan class=\"citation-1\">83.9%\u003C/span>\u003C/span>;\r\n  }\r\n}\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cp data-sourcepos=\"299:1-299:214\">This defines the default light and dark mode colors for ShadUI components. You can also define your own custom colors here if you prefer to manage them as CSS variables rather than directly in \u003Ccode>tailwind.config.js\u003C/code>.\u003C/p>\r\n\u003Ch4 data-sourcepos=\"301:1-301:51\">6. Creating Your First Design System Component\u003C/h4>\r\n\u003Cp data-sourcepos=\"303:1-303:117\">Let's build a simple \u003Ccode>BaseButton\u003C/code> component that leverages our design tokens and potentially wraps a ShadUI \u003Ccode>Button\u003C/code>.\u003C/p>\r\n\u003Cp data-sourcepos=\"305:1-305:32\">\u003Cstrong>\u003Ccode>components/BaseButton.vue\u003C/code>:\u003C/strong>\u003C/p>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cdiv>\r\n\u003Cdiv>Fragmento de c&oacute;digo\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-71 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-71 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"307:1-360:14\">&lt;script setup lang=\"ts\"&gt;\r\nimport { Button } from '@/components/ui/button' // Assuming ShadUI button is installed here\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\nimport { cn } from '@/lib/utils' // Assuming your utility function is here\r\n\r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\r\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\r\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n        link: 'text-primary underline-offset-4 hover:underline',\r\n        'brand-primary': 'bg-brand-primary text-white hover:bg-brand-primary/80', // Our custom brand button\r\n      },\r\n      size: {\r\n        default: 'h-10 px-4 py-2',\r\n        sm: 'h-9 rounded-md px-3',\r\n        lg: 'h-11 rounded-md px-8',\r\n        icon: 'h-10 w-10',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n)\r\n\r\ntype ButtonProps = VariantProps&lt;typeof buttonVariants&gt;\r\n\r\ninterface Props {\r\n  variant?: ButtonProps['variant']\r\n  size?: ButtonProps['size']\r\n  asChild?: boolean\r\n}\r\n\r\nwithDefaults(defineProps&lt;Props&gt;(), {\r\n  variant: 'default',\r\n  size: 'default',\r\n  asChild: false,\r\n})\r\n&lt;/script&gt;\r\n\r\n&lt;template&gt;\r\n  &lt;Button :class=\"cn(buttonVariants({ variant, size }))\" :as-child=\"asChild\"&gt;\r\n    &lt;slot /&gt;\r\n  &lt;/Button&gt;\r\n&lt;/template&gt;\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cp>\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/p>\r\n\u003Cp data-sourcepos=\"362:1-362:224\">Here, we're using \u003Ccode>class-variance-authority\u003C/code> (often included with ShadUI) to define button variants based on our Tailwind theme. Notice how we reference \u003Ccode>bg-brand-primary\u003C/code>, which comes directly from our \u003Ccode>tailwind.config.js\u003C/code>.\u003C/p>\r\n\u003Ch4 data-sourcepos=\"364:1-364:72\">7. Documenting Your Design System (Using Nuxt Content or Storybook)\u003C/h4>\r\n\u003Cp data-sourcepos=\"366:1-366:99\">This is a critical step! A design system without documentation is like a library without a catalog.\u003C/p>\r\n\u003Cp data-sourcepos=\"368:1-368:26\">\u003Cstrong>Option A: Nuxt Content\u003C/strong>\u003C/p>\r\n\u003Cp data-sourcepos=\"370:1-370:94\">Nuxt Content is fantastic for creating static documentation directly within your Nuxt project.\u003C/p>\r\n\u003Col data-sourcepos=\"372:1-449:0\">\r\n\u003Cli data-sourcepos=\"372:1-375:7\">\r\n\u003Cp data-sourcepos=\"372:5-372:29\">\u003Cstrong>Install Nuxt Content:\u003C/strong>\u003C/p>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>Bash\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-72 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-72 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"373:5-375:32\">npm install -D @nuxt/content\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/li>\r\n\u003Cli data-sourcepos=\"376:1-386:7\">\r\n\u003Cp data-sourcepos=\"376:5-376:32\">\u003Cstrong>Add to \u003Ccode>nuxt.config.ts\u003C/code>:\u003C/strong>\u003C/p>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>TypeScript\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-73 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-73 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"377:5-386:6\">// nuxt.config.ts\r\n\u003Cspan class=\"hljs-keyword\">export\u003C/span> default defineNuxtConfig({\r\n  \u003Cspan class=\"hljs-attr\">modules\u003C/span>: [\r\n    '@nuxtjs/tailwindcss',\r\n    \u003Cspan class=\"hljs-string\">'@nuxt/content'\u003C/span> // Add this\r\n  ],\r\n  \u003Cspan class=\"hljs-comment\">// ... other configs\u003C/span>\r\n})\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/li>\r\n\u003Cli data-sourcepos=\"387:1-438:0\">\r\n\u003Cp data-sourcepos=\"387:5-388:76\">\u003Cstrong>Create \u003Ccode>content/\u003C/code> directory:\u003C/strong> Inside \u003Ccode>content/\u003C/code>, you can create markdown files for your documentation.\u003C/p>\r\n\u003Cp data-sourcepos=\"390:5-390:39\">\u003Cstrong>\u003Ccode>content/1.getting-started.md\u003C/code>:\u003C/strong>\u003C/p>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>Markdown\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-74 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-74 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"392:5-404:51\"># Getting Started with the Design System\r\n\r\nWelcome to our Design System! This guide will help you understand how to use our tokens and components to build consistent and beautiful user interfaces.\r\n\r\n\u003Cspan class=\"hljs-section\">## Installation\u003C/span>\r\n\r\nFirst, ensure you have Nuxt 3 and Tailwind CSS configured in your project.\r\n\r\n```bash\r\n# (Instructions for installing your design system package if it's separate,\r\n# or how to access components if it's monorepo)\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Ch2 data-sourcepos=\"406:5-406:24\">Design Principles\u003C/h2>\r\n\u003Cul data-sourcepos=\"408:5-410:68\">\r\n\u003Cli data-sourcepos=\"408:5-408:69\">\u003Cstrong>Clarity:\u003C/strong> Our UI should be intuitive and easy to understand.\u003C/li>\r\n\u003Cli data-sourcepos=\"409:5-409:73\">\u003Cstrong>Consistency:\u003C/strong> Maintain a unified experience across all products.\u003C/li>\r\n\u003Cli data-sourcepos=\"410:5-410:68\">\u003Cstrong>Accessibility:\u003C/strong> Ensure our products are usable by everyone.\u003C/li>\r\n\u003C/ul>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cdiv>\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"411:5-429:18\">\r\n**`content/2.components/button.md`:**\r\n\r\n```markdown\r\n# Button Component\r\n\r\nThe `BaseButton` component is used for user actions.\r\n\r\n## Usage\r\n\r\n```html\r\n&lt;template&gt;\r\n  &lt;BaseButton variant=\"default\"&gt;Default Button&lt;/BaseButton&gt;\r\n  &lt;BaseButton variant=\"primary\"&gt;Primary Action&lt;/BaseButton&gt;\r\n  &lt;BaseButton variant=\"outline\"&gt;Outline Button&lt;/BaseButton&gt;\r\n  &lt;BaseButton variant=\"brand-primary\"&gt;Brand Button&lt;/BaseButton&gt;\r\n&lt;/template&gt;\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Ch2 data-sourcepos=\"431:5-431:15\">Variants\u003C/h2>\r\n\u003Cp data-sourcepos=\"433:5-436:81\">| Prop | Type | Description | |------------|------------|----------------------------------------------| | \u003Ccode>variant\u003C/code> | \u003Ccode>string\u003C/code> | Defines the visual style (e.g., \u003Ccode>default\u003C/code>, \u003Ccode>primary\u003C/code>, \u003Ccode>outline\u003C/code>, \u003Ccode>brand-primary\u003C/code>) | | \u003Ccode>size\u003C/code> | \u003Ccode>string\u003C/code> | Controls the size (e.g., \u003Ccode>default\u003C/code>, \u003Ccode>sm\u003C/code>, \u003Ccode>lg\u003C/code>) |\u003C/p>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cdiv>\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"437:5-438:0\">\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/li>\r\n\u003Cli data-sourcepos=\"439:1-449:0\">\r\n\u003Cp data-sourcepos=\"439:5-439:80\">\u003Cstrong>Display Content:\u003C/strong> Use \u003Ccode>&lt;ContentDoc&gt;\u003C/code> in your pages to render markdown:\u003C/p>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>Fragmento de c&oacute;digo\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-77 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-77 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"441:5-447:18\">&lt;template&gt;\r\n  &lt;main class=\"prose max-w-none p-8\"&gt;\r\n    &lt;ContentDoc /&gt;\r\n  &lt;/main&gt;\r\n&lt;/template&gt;\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cp data-sourcepos=\"448:5-448:77\">You'd typically have a navigation structure to browse your documentation.\u003C/p>\r\n\u003C/li>\r\n\u003C/ol>\r\n\u003Cp data-sourcepos=\"450:1-450:23\">\u003Cstrong>Option B: Storybook\u003C/strong>\u003C/p>\r\n\u003Cp data-sourcepos=\"452:1-452:105\">For more interactive component documentation and isolated development, Storybook is an industry standard.\u003C/p>\r\n\u003Col data-sourcepos=\"454:1-495:0\">\r\n\u003Cli data-sourcepos=\"454:1-458:50\">\r\n\u003Cp data-sourcepos=\"454:5-454:37\">\u003Cstrong>Install Storybook for Nuxt 3:\u003C/strong>\u003C/p>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>Bash\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-78 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-78 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"455:5-457:60\">npx storybook@latest init --type vue3 --builder webpack5\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cp data-sourcepos=\"458:5-458:50\">You might need to adjust for Nuxt 3 specifics.\u003C/p>\r\n\u003C/li>\r\n\u003Cli data-sourcepos=\"459:1-490:7\">\r\n\u003Cp data-sourcepos=\"459:5-459:77\">\u003Cstrong>Create stories:\u003C/strong> Write \u003Ccode>.stories.vue\u003C/code> files alongside your components.\u003C/p>\r\n\u003Cp data-sourcepos=\"461:5-461:44\">\u003Cstrong>\u003Ccode>components/BaseButton.stories.vue\u003C/code>:\u003C/strong>\u003C/p>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>Fragmento de c&oacute;digo\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-79 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-79 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"463:5-490:18\">&lt;script setup lang=\"ts\"&gt;\r\nimport BaseButton from './BaseButton.vue'\r\n\r\nconst variants = ['default', 'destructive', 'outline', 'secondary', 'ghost', 'link', 'brand-primary']\r\nconst sizes = ['default', 'sm', 'lg', 'icon']\r\n&lt;/script&gt;\r\n\r\n&lt;template&gt;\r\n  &lt;div&gt;\r\n    &lt;h1&gt;Base Button&lt;/h1&gt;\r\n    &lt;div class=\"space-y-4\"&gt;\r\n      &lt;div v-for=\"variant in variants\" :key=\"variant\" class=\"flex items-center space-x-2\"&gt;\r\n        &lt;h2 class=\"w-32 capitalize\"&gt;{{ variant }}&lt;/h2&gt;\r\n        &lt;BaseButton :variant=\"variant\"&gt;Button&lt;/BaseButton&gt;\r\n        &lt;BaseButton :variant=\"variant\" :size=\"sizes[1]\"&gt;Button (sm)&lt;/BaseButton&gt;\r\n        &lt;BaseButton :variant=\"variant\" :size=\"sizes[2]\"&gt;Button (lg)&lt;/BaseButton&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=\"flex items-center space-x-2\"&gt;\r\n        &lt;h2 class=\"w-32\"&gt;Icon&lt;/h2&gt;\r\n        &lt;BaseButton size=\"icon\"&gt;\r\n          &lt;span class=\"i-heroicons-home w-4 h-4\" /&gt;\r\n        &lt;/BaseButton&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/template&gt;\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/li>\r\n\u003Cli data-sourcepos=\"491:1-495:0\">\r\n\u003Cp data-sourcepos=\"491:5-491:22\">\u003Cstrong>Run Storybook:\u003C/strong>\u003C/p>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>Bash\r\n\u003Cdiv class=\"buttons ng-tns-c3230345347-80 ng-star-inserted\">\u003Cbutton class=\"mdc-icon-button mat-mdc-icon-button mat-mdc-button-base mat-mdc-tooltip-trigger copy-button ng-tns-c3230345347-80 mat-unthemed ng-star-inserted\" aria-label=\"Copiar c&oacute;digo\">\u003C/button>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C!---->\u003C/div>\r\n\u003C!---->\r\n\u003Cdiv>\r\n\u003Cdiv>\u003Ccode role=\"text\" data-test-id=\"code-content\" data-sourcepos=\"492:5-494:21\">npm run storybook\r\n\u003C/code>\u003C!---->\u003C!---->\u003C!---->\u003C/div>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C!---->\u003C/li>\r\n\u003C/ol>\r\n\u003Ch4 data-sourcepos=\"496:1-496:34\">8. Tooling and Best Practices\u003C/h4>\r\n\u003Cul data-sourcepos=\"498:1-505:0\">\r\n\u003Cli data-sourcepos=\"498:1-498:90\">\u003Cstrong>Linting &amp; Formatting:\u003C/strong> Use ESLint and Prettier to enforce code style consistency.\u003C/li>\r\n\u003Cli data-sourcepos=\"499:1-499:99\">\u003Cstrong>TypeScript:\u003C/strong> Leverage TypeScript for strong typing, especially for component props and events.\u003C/li>\r\n\u003Cli data-sourcepos=\"500:1-500:149\">\u003Cstrong>Atomic Design Principles:\u003C/strong> Consider structuring your components using Atomic Design methodology (Atoms, Molecules, Organisms, Templates, Pages).\u003C/li>\r\n\u003Cli data-sourcepos=\"501:1-501:92\">\u003Cstrong>Version Control:\u003C/strong> Manage your design system in a dedicated repository or as a monorepo.\u003C/li>\r\n\u003Cli data-sourcepos=\"502:1-502:212\">\u003Cstrong>Accessibility (A11y):\u003C/strong> Integrate automated accessibility checks (e.g., axe-core) into your CI/CD pipeline and manually test with screen readers. ShadUI components are generally well-tested for accessibility.\u003C/li>\r\n\u003Cli data-sourcepos=\"503:1-503:68\">\u003Cstrong>Testing:\u003C/strong> Write unit and integration tests for your components.\u003C/li>\r\n\u003Cli data-sourcepos=\"504:1-505:0\">\u003Cstrong>Contribution Guidelines:\u003C/strong> Clearly define how other developers can contribute to and extend the design system.\u003C/li>\r\n\u003C/ul>\r\n\u003Ch3 data-sourcepos=\"506:1-506:35\">The Benefits of a Design System\u003C/h3>\r\n\u003Cp data-sourcepos=\"508:1-508:108\">Investing time in building a design system with Nuxt 3, Tailwind CSS, and ShadUI offers significant returns:\u003C/p>\r\n\u003Cul data-sourcepos=\"510:1-516:0\">\r\n\u003Cli data-sourcepos=\"510:1-510:87\">\u003Cstrong>Consistency:\u003C/strong> Ensures a unified brand experience across all your digital products.\u003C/li>\r\n\u003Cli data-sourcepos=\"511:1-511:105\">\u003Cstrong>Efficiency:\u003C/strong> Accelerates development by providing pre-built, tested components and clear guidelines.\u003C/li>\r\n\u003Cli data-sourcepos=\"512:1-512:84\">\u003Cstrong>Scalability:\u003C/strong> Easier to onboard new team members and expand your product suite.\u003C/li>\r\n\u003Cli data-sourcepos=\"513:1-513:99\">\u003Cstrong>Maintainability:\u003C/strong> Centralized updates to design tokens and components simplify global changes.\u003C/li>\r\n\u003Cli data-sourcepos=\"514:1-514:83\">\u003Cstrong>Collaboration:\u003C/strong> Fosters better communication between designers and developers.\u003C/li>\r\n\u003Cli data-sourcepos=\"515:1-516:0\">\u003Cstrong>Quality:\u003C/strong> Higher quality UI thanks to reusable, well-tested, and accessible components.\u003C/li>\r\n\u003C/ul>\r\n\u003Ch3 data-sourcepos=\"517:1-517:14\">Conclusion\u003C/h3>\r\n\u003Cp data-sourcepos=\"519:1-519:332\">Creating a design system is an ongoing journey, not a one-time project. By leveraging the power of Nuxt 3 for its developer experience, Tailwind CSS for its unparalleled customization, and ShadUI for its robust and accessible components, you're building a solid foundation for a scalable, efficient, and beautiful product ecosystem.\u003C/p>\r\n\u003Cp data-sourcepos=\"521:1-521:204\">Start small, iterate often, and remember that the most effective design systems are those that are actively used, maintained, and evolved by the teams that build with them. Happy designing and developing!\u003C/p>","0a9f9ba4_1eb4_455a_a20e_e4b9c44d2977_Yq99HJIuXF.webp","2025-06-12 03:33:20.641Z","In the ever-evolving landscape of web development, consistency, scalability, and efficiency are paramount. As projects grow in complexity and team sizes expand, maintaining a cohesive user experience across all touchpoints becomes a significant challenge. This is where a well-crafted design system steps in, acting as the single source of truth for your UI.","mwwx2srwhbyyplk","/2025/06/11/creating-a-design-system-in-nuxt-3-with-tailwind-and-shadUI","",null,"Creating a Design System in Nuxt 3 with Tailwind CSS and ShadUI",{"author":10,"collectionId":11,"collectionName":12,"content":23,"cover_image":24,"created":25,"description":26,"id":27,"slug":28,"sub_title":19,"tags":20,"title":29,"updated":30,"video":19},"\u003Cp>This guide will walk you through setting up Nuxt with Tailwind CSS and provide tips and best practices for making the most of this combination.\u003C/p>\r\n\u003Ch2>1. Setting Up Your Nuxt Project with Tailwind CSS\u003C/h2>\r\n\u003Cp>The easiest way to integrate Tailwind CSS into your Nuxt project is using the official \u003Ccode>@nuxtjs/tailwindcss\u003C/code> module.\u003C/p>\r\n\u003Ch3>Step 1: Create a New Nuxt Project (if you haven't already)\u003C/h3>\r\n\u003Cpre class=\"code-block\">\u003Ccode>npx nuxi init my-nuxt-tailwind-app\r\ncd my-nuxt-tailwind-app\u003C/code>\u003C/pre>\r\n\u003Ch3>Step 2: Install Dependencies\u003C/h3>\r\n\u003Cpre class=\"code-block\">\u003Ccode>npm install -D @nuxtjs/tailwindcss\r\nnpm install -D tailwindcss postcss autoprefixer\u003C/code>\u003C/pre>\r\n\u003Ch3>Step 3: Configure the Nuxt Tailwind Module\u003C/h3>\r\n\u003Cp>Open your \u003Ccode>nuxt.config.ts\u003C/code> file and add \u003Ccode>@nuxtjs/tailwindcss\u003C/code> to the \u003Ccode>modules\u003C/code> array:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;!-- nuxt.config.ts --&gt;\r\nexport default defineNuxtConfig({\r\n  modules: [\r\n    '@nuxtjs/tailwindcss'\r\n  ]\r\n})\r\n    \u003C/code>\u003C/pre>\r\n\u003Ch3>Step 4: Configure Tailwind CSS\u003C/h3>\r\n\u003Cp>If you didn't have Tailwind CSS installed already, the \u003Ccode>@nuxtjs/tailwindcss\u003C/code> module will likely prompt you to generate a \u003Ccode>tailwind.config.js\u003C/code> file. If not, you can create it manually at the root of your project:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>npx tailwindcss init -p\u003C/code>\u003C/pre>\r\n\u003Cp>This will create two files: \u003Ccode>tailwind.config.js\u003C/code> and \u003Ccode>postcss.config.js\u003C/code>. You typically won't need to modify \u003Ccode>postcss.config.js\u003C/code> unless you have other PostCSS plugins.\u003C/p>\r\n\u003Ch3>Step 5: Include Tailwind Directives in Your CSS\u003C/h3>\r\n\u003Cp>Create a global CSS file (e.g., \u003Ccode>assets/css/tailwind.css\u003C/code>) and add the Tailwind CSS directives:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;!-- assets/css/tailwind.css --&gt;\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n    \u003C/code>\u003C/pre>\r\n\u003Ch3>Step 6: Import the Global CSS File in \u003Ccode>nuxt.config.ts\u003C/code>\u003C/h3>\r\n\u003Cp>Add the path to your CSS file in the \u003Ccode>css\u003C/code> array of your \u003Ccode>nuxt.config.ts\u003C/code>:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;!-- nuxt.config.ts --&gt;\r\nexport default defineNuxtConfig({\r\n  modules: [\r\n    '@nuxtjs/tailwindcss'\r\n  ],\r\n  css: [\r\n    '@/assets/css/tailwind.css'\r\n  ]\r\n})\r\n    \u003C/code>\u003C/pre>\r\n\u003Cp>Now, run your Nuxt development server:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>npm run dev\u003C/code>\u003C/pre>\r\n\u003Cp>You should now have Tailwind CSS fully integrated into your Nuxt project!\u003C/p>\r\n\u003Ch2>2. Tips and Best Practices for Nuxt and Tailwind CSS\u003C/h2>\r\n\u003Cdiv class=\"tip\">\r\n\u003Ch3>Tip 1: Leverage Tailwind's Utility Classes Directly in Your Components\u003C/h3>\r\n\u003Cp>Embrace the utility-first approach of Tailwind CSS. Style your elements directly in your Vue templates using the provided classes:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;template&gt;\r\n  &lt;div class=\"bg-gray-100 p-6 rounded-md shadow-md\"&gt;\r\n    &lt;h2 class=\"text-xl font-semibold text-gray-800 mb-2\"&gt;Welcome!&lt;/h2&gt;\r\n    &lt;p class=\"text-gray-700\"&gt;This is a simple card styled with Tailwind CSS.&lt;/p&gt;\r\n    &lt;button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\"&gt;\r\n      Click Me\r\n    &lt;/button&gt;\r\n  &lt;/div&gt;\r\n&lt;/template&gt;\r\n        \u003C/code>\u003C/pre>\r\n\u003C/div>\r\n\u003Cdiv class=\"tip\">\r\n\u003Ch3>Tip 2: Customize Your Tailwind Configuration\u003C/h3>\r\n\u003Cp>Tailwind's power lies in its customizability. Modify your \u003Ccode>tailwind.config.js\u003C/code> to match your project's design system:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;!-- tailwind.config.js --&gt;\r\n/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  content: [\r\n    \"./components/**/*.{js,vue,ts}\",\r\n    \"./layouts/**/*.vue\",\r\n    \"./pages/**/*.vue\",\r\n    \"./plugins/**/*.{js,ts}\",\r\n    \"./nuxt.config.{js,ts}\",\r\n    \"./app.vue\",\r\n  ],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        primary: '#3490dc',\r\n        secondary: '#ffed4a',\r\n      },\r\n      fontFamily: {\r\n        sans: ['\"Open Sans\"', 'sans-serif'],\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n}\r\n        \u003C/code>\u003C/pre>\r\n\u003C/div>\r\n\u003Cp>\u003Ccode>\r\n\r\n    \u003C/code>\u003C/p>\r\n\u003Cdiv class=\"tip\">\r\n\u003Ch3>Tip 3: Use Tailwind Directives for Custom Component Styles\u003C/h3>\r\n\u003Cp>While utility classes are great for quick styling, you might want to create reusable component styles. You can do this using Tailwind's \u003Ccode>@apply\u003C/code> directive within your CSS:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;!-- assets/css/components.css --&gt;\r\n.btn-primary {\r\n  @apply bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;\r\n}\r\n\r\n.card {\r\n  @apply bg-white rounded-md shadow-md p-6;\r\n}\r\n        \u003C/code>\u003C/pre>\r\n\u003Cp>Then, import this \u003Ccode>components.css\u003C/code> file (or whatever you name it) in your \u003Ccode>nuxt.config.ts\u003C/code>:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;!-- nuxt.config.ts --&gt;\r\nexport default defineNuxtConfig({\r\n  modules: [\r\n    '@nuxtjs/tailwindcss'\r\n  ],\r\n  css: [\r\n    '@/assets/css/tailwind.css',\r\n    '@/assets/css/components.css' // Import your custom component styles\r\n  ]\r\n})\r\n        \u003C/code>\u003C/pre>\r\n\u003Cp>Now you can use these custom classes in your templates:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;template&gt;\r\n  &lt;div&gt;\r\n    &lt;div class=\"card\"&gt;\r\n      &lt;h2 class=\"text-xl font-semibold text-gray-800 mb-2\"&gt;Card Title&lt;/h2&gt;\r\n      &lt;p class=\"text-gray-700\"&gt;Content of the card.&lt;/p&gt;\r\n      &lt;button class=\"btn-primary mt-4\"&gt;Action&lt;/button&gt;\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/template&gt;\r\n        \u003C/code>\u003C/pre>\r\n\u003C/div>\r\n\u003Cdiv class=\"tip\">\r\n\u003Ch3>Tip 4: Take Advantage of Tailwind's Responsive Design Features\u003C/h3>\r\n\u003Cp>Tailwind makes responsive design straightforward with its breakpoint prefixes (e.g., \u003Ccode>sm:\u003C/code>, \u003Ccode>md:\u003C/code>, \u003Ccode>lg:\u003C/code>, \u003Ccode>xl:\u003C/code>).\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;template&gt;\r\n  &lt;div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"&gt;\r\n    &lt;div class=\"bg-gray-200 p-4\"&gt;Item 1&lt;/div&gt;\r\n    &lt;div class=\"bg-gray-200 p-4\"&gt;Item 2&lt;/div&gt;\r\n    &lt;div class=\"bg-gray-200 p-4 hidden md:block\"&gt;Item 3&lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/template&gt;\r\n        \u003C/code>\u003C/pre>\r\n\u003Cp>In this example, the layout will be a single column on smaller screens, two columns on medium screens, and three columns on large screens. The third item will be hidden on medium screens and below.\u003C/p>\r\n\u003C/div>\r\n\u003Cdiv class=\"tip\">\r\n\u003Ch3>Tip 5: Use the \u003Ccode>safelist\u003C/code> Option for Dynamic Class Generation (Carefully)\u003C/h3>\r\n\u003Cp>Sometimes, you might have classes that are generated dynamically and Tailwind's JIT (Just-In-Time) compiler might not pick them up during the scanning process. You can use the \u003Ccode>safelist\u003C/code> option in your \u003Ccode>tailwind.config.js\u003C/code> to explicitly include these classes:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;!-- tailwind.config.js --&gt;\r\n/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  content: [\r\n    // ... your content paths\r\n  ],\r\n  safelist: [\r\n    'bg-red-500',\r\n    'text-lg',\r\n    /^col-span-/ // Matches any class starting with 'col-span-'\r\n  ],\r\n  theme: {\r\n    extend: {},\r\n  },\r\n  plugins: [],\r\n}\r\n        \u003C/code>\u003C/pre>\r\n\u003Cdiv class=\"caution\">\r\n\u003Cp>\u003Cstrong>Caution:\u003C/strong> Overusing \u003Ccode>safelist\u003C/code> can increase your final CSS bundle size, negating some of the benefits of the JIT compiler. Only use it when necessary for dynamically generated classes.\u003C/p>\r\n\u003C/div>\r\n\u003C/div>\r\n\u003Cdiv class=\"tip\">\r\n\u003Ch3>Tip 6: Explore Tailwind Plugins\u003C/h3>\r\n\u003Cp>Tailwind has a vibrant ecosystem of plugins that can add pre-built components, typography enhancements, and more. You can install and configure them in your \u003Ccode>tailwind.config.js\u003C/code>. For example, to add typography styles:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>npm install -D @tailwindcss/typography\u003C/code>\u003C/pre>\r\n\u003Cp>Then, in your \u003Ccode>tailwind.config.js\u003C/code>:\u003C/p>\r\n\u003Cpre class=\"code-block\">\u003Ccode>&lt;!-- tailwind.config.js --&gt;\r\n/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  content: [\r\n    // ... your content paths\r\n  ],\r\n  theme: {\r\n    extend: {},\r\n  },\r\n  plugins: [\r\n    require('@tailwindcss/typography'),\r\n  ],\r\n}\r\n        \u003C/code>\u003C/pre>\r\n\u003Cp>Now you can use the \u003Ccode>prose\u003C/code> class on an element containing your content for beautiful default typography.\u003C/p>\r\n\u003C/div>\r\n\u003Cdiv class=\"tip\">\r\n\u003Ch3>Tip 7: Be Mindful of Class Length\u003C/h3>\r\n\u003Cp>While Tailwind encourages using many utility classes, sometimes a long string of classes can become less readable. Consider extracting reusable patterns using custom CSS with \u003Ccode>@apply\u003C/code> if you find yourself repeating the same sets of utility classes frequently.\u003C/p>\r\n\u003C/div>\r\n\u003Cdiv class=\"tip\">\r\n\u003Ch3>Tip 8: Inspect Element in Your Browser\u003C/h3>\r\n\u003Cp>The browser's developer tools are your best friend when working with Tailwind. Inspect elements to see which Tailwind classes are being applied and experiment with adding or removing classes directly in the \"Styles\" panel to quickly visualize changes.\u003C/p>\r\n\u003C/div>\r\n\u003Ch2>Conclusion\u003C/h2>\r\n\u003Cp>Combining Nuxt's powerful features with Tailwind CSS's rapid styling capabilities creates a highly efficient and enjoyable development workflow. By following these tips and best practices, you can build beautiful and functional web applications with speed and maintainability.\u003C/p>\r\n\u003Cp>What aspects of Nuxt and Tailwind CSS are you most interested in exploring further? Let me know if you'd like a deeper dive into any specific topic!\u003C/p>","tailwindnuxt_l_od1_fceu_bc_j3A1HleNwN.webp","2025-06-02 04:33:18.035Z","Nuxt.js provides a fantastic developer experience for building Vue.js applications with features like server-side rendering, automatic routing, and modules. Tailwind CSS, on the other hand, is a utility-first CSS framework that allows for rapid styling directly in your HTML. Combining these two powerhouses can significantly speed up your development workflow and result in highly performant and stylish applications.","x58t9je79cph8ot","/2025/06/01/detailed-guide-to-nuxt-and-tailwind","A Detailed Guide to Nuxt and Tailwind","2025-06-12 03:00:25.752Z",{"author":10,"collectionId":11,"collectionName":12,"content":32,"cover_image":33,"created":34,"description":35,"id":36,"slug":37,"sub_title":19,"tags":20,"title":38,"updated":39,"video":40},"\u003Carticle>\u003Cheader>\u003C/header>\r\n\u003Csection>\r\n\u003Ch2>The Need for Caching\u003C/h2>\r\n\u003Cp>In modern web development, especially with Single Page Applications (SPAs) like those built with Nuxt 3, efficient data management is paramount. Fetching the same data repeatedly from an API can lead to:\u003C/p>\r\n\u003Cul>\r\n\u003Cli>Increased load times for users.\u003C/li>\r\n\u003Cli>Higher bandwidth consumption.\u003C/li>\r\n\u003Cli>Unnecessary strain on your backend infrastructure.\u003C/li>\r\n\u003C/ul>\r\n\u003Cp>Caching solves these problems by storing the results of expensive operations (like API calls) and serving them from the cache on subsequent requests. This leads to faster load times and a smoother user experience.\u003C/p>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Introducing Our Caching Utility\u003C/h2>\r\n\u003Cp>Let's look at the core of our caching mechanism. Below is the TypeScript code we'll be exploring:\u003C/p>\r\n\u003Cpre>                \u003Ccode>\r\ntype CacheEntry&lt;T&gt; = {\r\n  value: T\r\n  expiry: number\r\n}\r\n\r\nexport type CacheOptions = {\r\n  ttl?: number\r\n  namespace?: string\r\n  debug?: boolean\r\n}\r\n\r\nconst DEFAULT_TTL = 3600 * 1000 // 1 hour\r\nconst DEFAULT_NAMESPACE = 'app-cache'\r\n\r\nexport const useCacheUtils = ({\r\n  ttl = DEFAULT_TTL,\r\n  namespace = DEFAULT_NAMESPACE,\r\n  debug = false,\r\n}: CacheOptions = {}) =&gt; {\r\n  const cache = new Map&lt;string, CacheEntry&lt;any&gt;&gt;()\r\n  const prefix = `${namespace}|`\r\n\r\n  const log = (...args: unknown[]) =&gt; {\r\n    if (debug) console.log('[cache]', ...args)\r\n  }\r\n\r\n  const getCacheKey = (operation: string, params: Record&lt;string, unknown&gt; = {}) =&gt; {\r\n    const paramString = Object.entries(params)\r\n      .sort(([a], [b]) =&gt; a.localeCompare(b))\r\n      .map(([key, val]) =&gt; `${key}:${JSON.stringify(val)}`)\r\n      .join('|')\r\n    return `${prefix}${operation}|${paramString}`\r\n  }\r\n\r\n  const set = &lt;T&gt;(key: string, value: T, ttlOverride?: number): void =&gt; {\r\n    const expiry = Date.now() + (ttlOverride ?? ttl)\r\n    cache.set(key, { value, expiry })\r\n    log('SET', key, value)\r\n  }\r\n\r\n  const get = &lt;T&gt;(key: string): T | null =&gt; {\r\n    const entry = cache.get(key)\r\n    if (!entry) {\r\n      log('MISS', key)\r\n      return null\r\n    }\r\n    if (entry.expiry &lt; Date.now()) {\r\n      log('EXPIRED', key)\r\n      cache.delete(key)\r\n      return null\r\n    }\r\n    log('HIT', key)\r\n    return entry.value\r\n  }\r\n\r\n  const del = (key: string): void =&gt; {\r\n    log('DELETE', key)\r\n    cache.delete(key)\r\n  }\r\n\r\n  const clearExpired = (): void =&gt; {\r\n    const now = Date.now()\r\n    for (const [key, { expiry }] of cache.entries()) {\r\n      if (expiry &lt;= now) {\r\n        log('CLEANUP', key)\r\n        cache.delete(key)\r\n      }\r\n    }\r\n  }\r\n\r\n  const clearAll = (): void =&gt; {\r\n    log('CLEAR ALL')\r\n    cache.clear()\r\n  }\r\n\r\n  return {\r\n    getCacheKey,\r\n    set,\r\n    get,\r\n    del,\r\n    clearExpired,\r\n    clearAll,\r\n  } as const\r\n}\r\n                \u003C/code>\r\n            \u003C/pre>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Dissecting the Code\u003C/h2>\r\n\u003Cp>Let's break down each part of our caching utility:\u003C/p>\r\n\u003Ch3>\u003Ccode>CacheEntry&lt;T&gt;\u003C/code> Type\u003C/h3>\r\n\u003Cp>This TypeScript type defines the structure of an item stored in our cache:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\ntype CacheEntry&lt;T&gt; = {\r\n  value: T // The actual data being cached\r\n  expiry: number // A Unix timestamp indicating when the cache entry expires\r\n}\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>CacheOptions\u003C/code> Type\u003C/h3>\r\n\u003Cp>This type defines the optional configurations you can pass when initializing the cache utility:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nexport type CacheOptions = {\r\n  ttl?: number // Time-to-live in milliseconds for cache entries (default: 1 hour)\r\n  namespace?: string // A prefix for all cache keys to avoid collisions (default: 'app-cache')\r\n  debug?: boolean // Enables console logging for cache operations (default: false)\r\n}\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>DEFAULT_TTL\u003C/code> and \u003Ccode>DEFAULT_NAMESPACE\u003C/code>\u003C/h3>\r\n\u003Cp>These constants provide default values for the cache's time-to-live (1 hour) and namespace ('app-cache').\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nconst DEFAULT_TTL = 3600 * 1000 // 1 hour\r\nconst DEFAULT_NAMESPACE = 'app-cache'\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>useCacheUtils\u003C/code> Function\u003C/h3>\r\n\u003Cp>This is the main composable function that sets up our caching logic. It accepts an optional \u003Ccode>CacheOptions\u003C/code> object.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nexport const useCacheUtils = ({\r\n  ttl = DEFAULT_TTL,\r\n  namespace = DEFAULT_NAMESPACE,\r\n  debug = false,\r\n}: CacheOptions = {}) =&gt; {\r\n  // ... implementation details\r\n}\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>cache\u003C/code> (\u003Ccode>Map\u003C/code>)\u003C/h3>\r\n\u003Cp>At the heart of our utility is a JavaScript \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"noopener\">\u003Ccode>Map\u003C/code>\u003C/a>. This data structure efficiently stores key-value pairs, where the key will be our generated cache key and the value will be a \u003Ccode>CacheEntry\u003C/code>.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  const cache = new Map&lt;string, CacheEntry&lt;any&gt;&gt;()\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>prefix\u003C/code>\u003C/h3>\r\n\u003Cp>This string is used to prepend the namespace to every cache key, helping to avoid potential key collisions if you have multiple independent caching mechanisms in your application.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  const prefix = `${namespace}|`\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>log\u003C/code> Function\u003C/h3>\r\n\u003Cp>A simple utility function to log cache operations to the console, but only when the \u003Ccode>debug\u003C/code> option is set to \u003Ccode>true\u003C/code>.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  const log = (...args: unknown[]) =&gt; {\r\n    if (debug) console.log('[cache]', ...args)\r\n  }\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>getCacheKey\u003C/code> Function\u003C/h3>\r\n\u003Cp>This crucial function generates a unique key for each cached operation based on the operation name and any provided parameters. It ensures that different parameters for the same operation result in different cache entries. The parameters are sorted and stringified to create a consistent key regardless of the order in which they are provided.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  const getCacheKey = (operation: string, params: Record&lt;string, unknown&gt; = {}) =&gt; {\r\n    const paramString = Object.entries(params)\r\n      .sort(([a], [b]) =&gt; a.localeCompare(b))\r\n      .map(([key, val]) =&gt; `${key}:${JSON.stringify(val)}`)\r\n      .join('|')\r\n    return `${prefix}${operation}|${paramString}`\r\n  }\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>set\u003C/code> Function\u003C/h3>\r\n\u003Cp>This function adds or updates an entry in the cache. It takes a \u003Ccode>key\u003C/code>, a \u003Ccode>value\u003C/code> to cache, and an optional \u003Ccode>ttlOverride\u003C/code> to set a specific expiration time for this entry.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  const set = &lt;T&gt;(key: string, value: T, ttlOverride?: number): void =&gt; {\r\n    const expiry = Date.now() + (ttlOverride ?? ttl)\r\n    cache.set(key, { value, expiry })\r\n    log('SET', key, value)\r\n  }\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>get\u003C/code> Function\u003C/h3>\r\n\u003Cp>This function retrieves a value from the cache based on the provided \u003Ccode>key\u003C/code>. It checks if the entry exists and if it hasn't expired. If the entry is expired, it's automatically removed from the cache, and \u003Ccode>null\u003C/code> is returned.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  const get = &lt;T&gt;(key: string): T | null =&gt; {\r\n    const entry = cache.get(key)\r\n    if (!entry) {\r\n      log('MISS', key)\r\n      return null\r\n    }\r\n    if (entry.expiry &lt; Date.now()) {\r\n      log('EXPIRED', key)\r\n      cache.delete(key)\r\n      return null\r\n    }\r\n    log('HIT', key)\r\n    return entry.value\r\n  }\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>del\u003C/code> Function\u003C/h3>\r\n\u003Cp>This function removes a specific entry from the cache using its \u003Ccode>key\u003C/code>.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  const del = (key: string): void =&gt; {\r\n    log('DELETE', key)\r\n    cache.delete(key)\r\n  }\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>clearExpired\u003C/code> Function\u003C/h3>\r\n\u003Cp>This function iterates through all cache entries and removes any that have expired.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  const clearExpired = (): void =&gt; {\r\n    const now = Date.now()\r\n    for (const [key, { expiry }] of cache.entries()) {\r\n      if (expiry &lt;= now) {\r\n        log('CLEANUP', key)\r\n        cache.delete(key)\r\n      }\r\n    }\r\n  }\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>\u003Ccode>clearAll\u003C/code> Function\u003C/h3>\r\n\u003Cp>This function clears the entire cache.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  const clearAll = (): void =&gt; {\r\n    log('CLEAR ALL')\r\n    cache.clear()\r\n  }\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>Returned Object\u003C/h3>\r\n\u003Cp>Finally, the \u003Ccode>useCacheUtils\u003C/code> function returns an object containing all these utility functions, making them easy to use within your Nuxt 3 components and composables.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n  return {\r\n    getCacheKey,\r\n    set,\r\n    get,\r\n    del,\r\n    clearExpired,\r\n    clearAll,\r\n  } as const\r\n            \u003C/code>\u003C/pre>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Use Cases and Examples\u003C/h2>\r\n\u003Cp>Where can you use this caching utility in your Nuxt 3 application?\u003C/p>\r\n\u003Ch3>Caching API Responses\u003C/h3>\r\n\u003Cp>The most common use case is caching the responses from your API endpoints. Let's imagine you have a function \u003Ccode>fetchUserProfile(userId: string)\u003C/code> that fetches user data. You can cache the result like this:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nimport { useCacheUtils } from './cache-utils';\r\n\r\nexport default defineComponent({\r\n  async setup() {\r\n    const { getCacheKey, get, set } = useCacheUtils();\r\n    const userId = 'user123';\r\n    const cacheKey = getCacheKey('userProfile', { userId });\r\n\r\n    const cachedData = get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Serving user profile from cache:', cachedData);\r\n      return { user: cachedData };\r\n    }\r\n\r\n    const { data, error } = await useFetch(`/api/users/${userId}`);\r\n    if (error.value) {\r\n      console.error('Failed to fetch user profile:', error.value);\r\n      return {};\r\n    }\r\n\r\n    if (data.value) {\r\n      set(cacheKey, data.value);\r\n      console.log('Fetched and cached user profile:', data.value);\r\n      return { user: data.value };\r\n    }\r\n\r\n    return {};\r\n  },\r\n});\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>Caching Expensive Computations\u003C/h3>\r\n\u003Cp>If you have functions that perform computationally intensive tasks, you can cache their results based on the input parameters.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nimport { useCacheUtils } from './cache-utils';\r\n\r\nconst fibonacci = (n: number): number =&gt; {\r\n  if (n &lt;= 1) return n;\r\n  return fibonacci(n - 1) + fibonacci(n - 2);\r\n};\r\n\r\nexport const useCachedFibonacci = () =&gt; {\r\n  const { getCacheKey, get, set } = useCacheUtils();\r\n\r\n  return (n: number) =&gt; {\r\n    const cacheKey = getCacheKey('fibonacci', { n });\r\n    const cachedResult = get&lt;number&gt;(cacheKey);\r\n    if (cachedResult !== null) {\r\n      console.log(`Fibonacci(${n}) served from cache:`, cachedResult);\r\n      return cachedResult;\r\n    }\r\n\r\n    const result = fibonacci(n);\r\n    set(cacheKey, result);\r\n    console.log(`Calculated and cached Fibonacci(${n}):`, result);\r\n    return result;\r\n  };\r\n};\r\n            \u003C/code>\u003C/pre>\r\n\u003Ch3>Controlling Cache Expiry\u003C/h3>\r\n\u003Cp>You can even set specific TTLs for different types of data if needed.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nimport { useCacheUtils } from './cache-utils';\r\n\r\nexport default defineComponent({\r\n  async setup() {\r\n    const { getCacheKey, get, set } = useCacheUtils();\r\n    const newsFeedKey = getCacheKey('newsFeed');\r\n    const cachedNews = get(newsFeedKey);\r\n\r\n    if (cachedNews) {\r\n      console.log('Serving news feed from cache.');\r\n      return { news: cachedNews };\r\n    }\r\n\r\n    const { data, error } = await useFetch('/api/news');\r\n    if (data.value) {\r\n      // Cache news feed for only 5 minutes (300,000 milliseconds)\r\n      set(newsFeedKey, data.value, 300000);\r\n      console.log('Fetched and cached news feed.');\r\n      return { news: data.value };\r\n    }\r\n\r\n    return {};\r\n  },\r\n});\r\n            \u003C/code>\u003C/pre>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Conclusion of Part 1\u003C/h2>\r\n\u003Cp>Congratulations! You've now built a foundational in-memory caching utility for your Nuxt 3 application. This utility provides a simple yet powerful way to store and retrieve data, significantly improving performance in various scenarios.\u003C/p>\r\n\u003Cp>In the next part of this tutorial, we'll take this a step further by integrating \u003Ca href=\"https://pocketbase.io/\" target=\"_blank\" rel=\"noopener\">Pocketbase\u003C/a> into our Nuxt 3 application. We'll learn how to set it up and then explore how to use our caching utility to efficiently manage data fetched from Pocketbase, specifically for a blog page. Stay tuned!\u003C/p>\r\n\u003C/section>\r\n\u003C/article>","nuxt_3_caching_i7q4u7_r7z_w_GdbipVgSQS.webp","2025-05-22 05:21:12.562Z","Today, we're diving deep into creating a robust and flexible in-memory caching solution for your Nuxt 3 application. This foundation will be crucial for optimizing data fetching and improving the user experience, especially when integrating with backend services.","77gyxs7m571p3ov","/2025/04/26/building-efficient-data-retrieval-a-caching-strategy-for-nuxt-3","Building Efficient Data Retrieval A Caching Strategy for Nuxt 3","2025-06-12 03:03:26.629Z","https://videos.pexels.com/video-files/3835213/3835213-hd_1920_1080_25fps.mp4",{"author":10,"collectionId":11,"collectionName":12,"content":42,"cover_image":43,"created":44,"description":45,"id":46,"slug":47,"sub_title":19,"tags":20,"title":48,"updated":49,"video":50},"\u003Ch2>What is Pocketbase?\u003C/h2>\r\n\u003Cp>\u003Ca href=\"https://pocketbase.io/\" target=\"_blank\" rel=\"noopener\">Pocketbase\u003C/a> is a free and open-source backend written in Go. It's designed to be a single file, making it incredibly easy to set up and deploy. Pocketbase provides:\u003C/p>\r\n\u003Cul>\r\n\u003Cli>A built-in database (SQLite).\u003C/li>\r\n\u003Cli>A REST API.\u003C/li>\r\n\u003Cli>User authentication.\u003C/li>\r\n\u003Cli>File storage.\u003C/li>\r\n\u003Cli>An admin panel.\u003C/li>\r\n\u003C/ul>\r\n\u003Cp>It's an excellent choice for small to medium-sized projects, and it pairs perfectly with Nuxt 3 for building full-stack applications.\u003C/p>\r\n\u003Csection>\r\n\u003Ch2>Setting up Pocketbase\u003C/h2>\r\n\u003Cp>First, you'll need to download the Pocketbase executable for your operating system from the official \u003Ca href=\"https://pocketbase.io/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">Pocketbase documentation\u003C/a>. Follow the instructions there to download and extract the executable.\u003C/p>\r\n\u003Ch3>Initializing Pocketbase\u003C/h3>\r\n\u003Cp>Open your terminal, navigate to the directory where you extracted Pocketbase, and initialize it:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n./pocketbase serve\u003Cbr>\u003C/code>\u003C/pre>\r\n\u003Cp>This command will start the Pocketbase server and create a \u003Ccode>pb_data\u003C/code> directory to store your database and files.\u003C/p>\r\n\u003Ch3>First-Time Login and Admin User\u003C/h3>\r\n\u003Cp>The first time you run \u003Ccode>./pocketbase serve\u003C/code>, Pocketbase will detect that no admin user exists. You'll be prompted in the terminal to create one. Follow the prompts carefully:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nAdmin email: your_email@example.com\r\nAdmin password: your_secure_password\r\nAdmin password confirm: your_secure_password\r\n\u003C/code>\u003C/pre>\r\n\u003Cp>Enter your desired email address and a strong password. These credentials will give you full access to the Pocketbase admin panel.\u003C/p>\r\n\u003Ch3>Accessing the Admin Panel\u003C/h3>\r\n\u003Cp>Once the server is running, you can access the Pocketbase admin panel by opening your browser and navigating to \u003Ccode>http://127.0.0.1:8090/_/\u003C/code>. Log in with the admin credentials you just created. This panel allows you to manage your database schema, users, and files through a user-friendly interface.\u003C/p>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Creating the \"posts\" Collection in Pocketbase\u003C/h2>\r\n\u003Cp>Before we start interacting with data from our Nuxt 3 application, let's create a collection in Pocketbase to store our blog posts.\u003C/p>\r\n\u003Col>\r\n\u003Cli>Open the Pocketbase admin panel at \u003Ccode>http://127.0.0.1:8090/_/\u003C/code> and log in.\u003C/li>\r\n\u003Cli>On the left sidebar, click the \u003Ckbd>+\u003C/kbd> \"Add new collection\" button.\u003C/li>\r\n\u003Cli>In the \"Name\" field, enter \u003Ccode>posts\u003C/code> (this is important as we'll use this name in our code).\u003C/li>\r\n\u003Cli>Choose \"Base table\" as the type.\u003C/li>\r\n\u003Cli>Click \"Create\".\u003C/li>\r\n\u003Cli>Now, let's add some fields to our \"posts\" collection. Click the \"Add new field\" button:\r\n\u003Cul>\r\n\u003Cli>For the \"title\" field:\r\n\u003Cul>\r\n\u003Cli>Type: \"Text\"\u003C/li>\r\n\u003Cli>Name: \u003Ccode>title\u003C/code>\u003C/li>\r\n\u003Cli>You can leave the other options as default for now. Click \"Save field\".\u003C/li>\r\n\u003C/ul>\r\n\u003C/li>\r\n\u003Cli>For the \"content\" field:\r\n\u003Cul>\r\n\u003Cli>Type: \"Text\"\u003C/li>\r\n\u003Cli>Name: \u003Ccode>content\u003C/code>\u003C/li>\r\n\u003Cli>Consider making this a \"Long text\" type if your blog post content will be lengthy. Click \"Save field\".\u003C/li>\r\n\u003C/ul>\r\n\u003C/li>\r\n\u003C/ul>\r\n\u003C/li>\r\n\u003C/ol>\r\n\u003Cp>You now have a \"posts\" collection with \u003Ccode>title\u003C/code> and \u003Ccode>content\u003C/code> fields.\u003C/p>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Setting Permissions for the \"posts\" Collection\u003C/h2>\r\n\u003Cp>To allow our Nuxt 3 application to perform CRUD operations on the \"posts\" collection, we need to configure the permissions.\u003C/p>\r\n\u003Col>\r\n\u003Cli>In the Pocketbase admin panel, navigate to the \"posts\" collection.\u003C/li>\r\n\u003Cli>Click on the \"Permissions\" tab.\u003C/li>\r\n\u003Cli>Let's set the following basic permissions for this tutorial:\r\n\u003Cul>\r\n\u003Cli>\u003Cstrong>List:\u003C/strong> Set this to \"Any\" to allow anyone to read the list of posts.\u003C/li>\r\n\u003Cli>\u003Cstrong>Create:\u003C/strong> For simplicity in this tutorial, you can set this to \"Any\" to allow anyone to create a post. However, in a real application, you'd typically restrict this to authenticated users or admins.\u003C/li>\r\n\u003Cli>\u003Cstrong>View:\u003C/strong> Set this to \"Any\" to allow anyone to view individual posts.\u003C/li>\r\n\u003Cli>\u003Cstrong>Update:\u003C/strong> For this tutorial, you can set this to \"Any\". In a real application, you might want to allow only the creator or admins to update.\u003C/li>\r\n\u003Cli>\u003Cstrong>Delete:\u003C/strong> Similar to update, for simplicity, we'll set this to \"Any\" here. In a real application, you'd likely restrict this.\u003C/li>\r\n\u003C/ul>\r\n\u003C/li>\r\n\u003Cli>Click \"Save permissions\".\u003C/li>\r\n\u003C/ol>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Installing the Pocketbase JavaScript SDK\u003C/h2>\r\n\u003Cp>Now, let's install the Pocketbase JavaScript SDK in our Nuxt 3 project. Open a terminal in your Nuxt 3 project directory and run:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nnpm install pocketbase\r\n# or\r\nyarn add pocketbase\r\n# or\r\npnpm add pocketbase\r\n\u003Cbr>\u003C/code>\u003C/pre>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Creating the \u003Ccode>usePocketbase\u003C/code> Composable\u003C/h2>\r\n\u003Cp>To make it easy to access the Pocketbase client throughout our Nuxt 3 application, we'll create a composable. Create a file named \u003Ccode>usePocketbase.ts\u003C/code> in your \u003Ccode>composables\u003C/code> directory (create the directory if it doesn't exist).\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nimport PocketBase from 'pocketbase';\r\nimport { useRuntimeConfig } from '#app';\r\n\r\nconst POCKETBASE_URL = 'http://127.0.0.1:8090'; // Default, should be in config\r\n\r\nlet pb: PocketBase | null = null;\r\n\r\nexport const usePocketbase = () =&gt; {\r\n    const config = useRuntimeConfig();\r\n    const pocketbaseUrl = config.public.pocketbaseUrl || POCKETBASE_URL; // Use runtime config\r\n\r\n    if (!pb) {\r\n        pb = new PocketBase(pocketbaseUrl);\r\n    }\r\n\r\n    return pb;\r\n};\r\n\u003C/code>\u003C/pre>\r\n\u003Cp>Let's break down this code:\u003C/p>\r\n\u003Cul>\r\n\u003Cli>We import the \u003Ccode>PocketBase\u003C/code> class from the \u003Ccode>pocketbase\u003C/code> package.\u003C/li>\r\n\u003Cli>We also import \u003Ccode>useRuntimeConfig\u003C/code> from \u003Ccode>#app\u003C/code> to access configuration values.\u003C/li>\r\n\u003Cli>We define a \u003Ccode>POCKETBASE_URL\u003C/code> constant as a fallback.\u003C/li>\r\n\u003Cli>We declare a \u003Ccode>pb\u003C/code> variable to hold our Pocketbase client instance (singleton pattern).\u003C/li>\r\n\u003Cli>The \u003Ccode>usePocketbase\u003C/code> function:\r\n\u003Cul>\r\n\u003Cli>Gets the Pocketbase URL from the Nuxt runtime config (\u003Ccode>config.public.pocketbaseUrl\u003C/code>). This allows you to configure the URL in your \u003Ccode>nuxt.config.ts\u003C/code> file, making it easy to switch between development and production environments using environment variables.\u003C/li>\r\n\u003Cli>If \u003Ccode>pb\u003C/code> is null, it creates a new \u003Ccode>PocketBase\u003C/code> client with the configured URL.\u003C/li>\r\n\u003Cli>Returns the \u003Ccode>pb\u003C/code> instance.\u003C/li>\r\n\u003C/ul>\r\n\u003C/li>\r\n\u003C/ul>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Configuring the Pocketbase URL in Nuxt\u003C/h2>\r\n\u003Cp>To properly configure the Pocketbase URL, open your \u003Ccode>nuxt.config.ts\u003C/code> file and add the following:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\nexport default defineNuxtConfig({\r\n    runtimeConfig: {\r\n        public: {\r\n            pocketbaseUrl: process.env.POCKETBASE_URL || 'http://127.0.0.1:8090',\r\n        },\r\n    },\r\n});\r\n\u003C/code>\u003C/pre>\r\n\u003Cp>This code:\u003C/p>\r\n\u003Cul>\r\n\u003Cli>Uses \u003Ccode>defineNuxtConfig\u003C/code> to configure Nuxt 3.\u003C/li>\r\n\u003Cli>Sets the \u003Ccode>pocketbaseUrl\u003C/code> in the \u003Ccode>public\u003C/code> section of \u003Ccode>runtimeConfig\u003C/code>, making it accessible client-side.\u003C/li>\r\n\u003Cli>Prioritizes the \u003Ccode>POCKETBASE_URL\u003C/code> environment variable if it's set (for deployment), falling back to \u003Ccode>http://127.0.0.1:8090\u003C/code> for local development.\u003C/li>\r\n\u003C/ul>\r\n\u003Cp>\u003Cstrong>Important:\u003C/strong> For production, you will need to set the \u003Ccode>POCKETBASE_URL\u003C/code> environment variable on your hosting provider.\u003C/p>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Implementing CRUD Operations with the \u003Ccode>usePocketbase\u003C/code> Composable\u003C/h2>\r\n\u003Cp>Now, let's see how to perform Create, Read, Update, and Delete operations on our \"posts\" collection using the \u003Ccode>usePocketbase\u003C/code> composable within a Nuxt 3 component or page.\u003C/p>\r\n\u003Ch3>Fetching Posts (Read)\u003C/h3>\r\n\u003Cpre>\u003Ccode>\r\n\r\n\r\n&lt;script setup&gt;\r\nimport { ref, onMounted } from 'vue';\r\nimport { usePocketbase } from '@/composables/usePocketbase';\r\n\r\nconst pb = usePocketbase();\r\nconst posts = ref([]);\r\n\r\nonMounted(async () =&gt; {\r\n  try {\r\n    const result = await pb.collection('posts').getList(1, 50); // Fetch up to 50 posts\r\n    posts.value = result.items;\r\n    console.log('Posts:', result);\r\n  } catch (error) {\r\n    console.error('Error fetching posts:', error);\r\n  }\r\n});\r\n&lt;/script&gt;\r\n\u003C/code>\u003C/pre>\r\n\u003Cp>In this example, we fetch a list of posts when the component mounts and display them.\u003C/p>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Next Steps\u003C/h2>\r\n\u003Cp>You've now successfully integrated Pocketbase into your Nuxt 3 application, created a reusable composable, and learned how to read data. In the subsequent parts of this tutorial, we will implement the Create, Update, and Delete operations to complete our CRUD functionality. Stay tuned!\u003C/p>\r\n\u003C/section>","nuxt_pocketbase_doieez_c8_ps_Rv9rJpOJ1z.webp","2025-05-22 05:19:58.949Z","If you're building modern web applications with Nuxt 3 and need a lightweight, self-hosted backend, PocketBase is a fantastic choice. This comprehensive guide will walk you through setting up PocketBase, integrating it with Nuxt 3, and building your first data-driven application.","wag2ybak6vs6rkh","/2025/05/08/building-dynamic-nuxt-3-applications-with-pocketbase","Building Dynamic Nuxt 3 Applications with PocketBase","2025-06-12 03:05:47.725Z","https://videos.pexels.com/video-files/3129576/3129576-uhd_2560_1440_30fps.mp4",{"author":10,"collectionId":11,"collectionName":12,"content":52,"cover_image":53,"created":54,"description":55,"id":56,"slug":57,"sub_title":19,"tags":20,"title":58,"updated":59,"video":19},"\u003Carticle>\u003Cheader>\r\n\u003Ch1>Integrating Pocketbase with Nuxt 3\u003C/h1>\r\n\u003Cp>Welcome! In this first part of our tutorial series, we'll integrate Pocketbase, a powerful open-source backend, into our Nuxt 3 application. We'll set up the Pocketbase JavaScript SDK and create a convenient \u003Ccode>\u003Cspan class=\"selected\">usePocketbase\u003C/span>\u003C/code> composable to streamline our interactions with the backend.\u003C/p>\r\n\u003C/header>\r\n\u003Csection>\r\n\u003Ch2>What is Pocketbase?\u003C/h2>\r\n\u003Cp>\u003Ca href=\"https://pocketbase.io/\" target=\"_blank\" rel=\"noopener\">Pocketbase\u003C/a> is a free and open-source backend written in Go. It's designed to be a single file, making it incredibly easy to set up and deploy. Pocketbase provides:\u003C/p>\r\n\u003Cul>\r\n\u003Cli>A built-in database (SQLite).\u003C/li>\r\n\u003Cli>A REST API.\u003C/li>\r\n\u003Cli>User authentication.\u003C/li>\r\n\u003Cli>File storage.\u003C/li>\r\n\u003Cli>An admin panel.\u003C/li>\r\n\u003C/ul>\r\n\u003Cp>It's an excellent choice for small to medium-sized projects, and it pairs perfectly with Nuxt 3 for building full-stack applications.\u003C/p>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Setting up Pocketbase\u003C/h2>\r\n\u003Cp>First, you'll need to download the Pocketbase executable for your operating system from the official \u003Ca href=\"https://pocketbase.io/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">Pocketbase documentation\u003C/a>. Follow the instructions there to download and extract the executable.\u003C/p>\r\n\u003Ch3>Initializing Pocketbase\u003C/h3>\r\n\u003Cp>Open your terminal, navigate to the directory where you extracted Pocketbase, and initialize it:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n\r\n./pocketbase serve\u003Cbr>\u003C/code>\u003C/pre>\r\n\u003Cp>This command will start the Pocketbase server and create a \u003Ccode>pb_data\u003C/code> directory to store your database and files. The first time you run this, Pocketbase will prompt you to create an admin user. Follow the prompts to set up your admin credentials.\u003C/p>\r\n\u003Ch3>Accessing the Admin Panel\u003C/h3>\r\n\u003Cp>Once the server is running, you can access the Pocketbase admin panel by opening your browser and navigating to \u003Ccode>http://127.0.0.1:8090/_/\u003C/code>. Log in with the admin credentials you just created. This panel allows you to manage your database schema, users, and files through a user-friendly interface.\u003C/p>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Installing the Pocketbase JavaScript SDK\u003C/h2>\r\n\u003Cp>Now, let's install the Pocketbase JavaScript SDK in our Nuxt 3 project. Open a terminal in your Nuxt 3 project directory and run:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n\r\nnpm install pocketbase\r\n\r\n# or\r\n\r\nyarn add pocketbase\r\n\r\n# or\r\n\r\npnpm add pocketbase\r\n\r\n\u003Cbr>\u003C/code>\u003C/pre>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Creating the \u003Ccode>usePocketbase\u003C/code> Composable\u003C/h2>\r\n\u003Cp>To make it easy to access the Pocketbase client throughout our Nuxt 3 application, we'll create a composable. Create a file named \u003Ccode>usePocketbase.ts\u003C/code> in your \u003Ccode>composables\u003C/code> directory (create the directory if it doesn't exist).\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n\r\nimport PocketBase from 'pocketbase';\r\n\r\nimport { useRuntimeConfig } from '#app';\r\n\r\n\r\n\r\nconst POCKETBASE_URL = 'http://127.0.0.1:8090'; // Default, should be in config\r\n\r\n\r\n\r\nlet pb: PocketBase | null = null;\r\n\r\n\r\n\r\nexport const usePocketbase = () =&gt; {\r\n\r\n&nbsp; &nbsp; const config = useRuntimeConfig();\r\n\r\n&nbsp; &nbsp; const pocketbaseUrl = config.public.pocketbaseUrl || POCKETBASE_URL; // Use runtime config\r\n\r\n\r\n\r\n&nbsp; &nbsp; if (!pb) {\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; pb = new PocketBase(pocketbaseUrl);\r\n\r\n&nbsp; &nbsp; }\r\n\r\n\r\n\r\n&nbsp; &nbsp; return pb;\r\n\r\n};\r\n\r\n\u003C/code>\u003C/pre>\r\n\u003Cp>Let's break down this code:\u003C/p>\r\n\u003Cul>\r\n\u003Cli>We import the \u003Ccode>PocketBase\u003C/code> class from the \u003Ccode>pocketbase\u003C/code> package.\u003C/li>\r\n\u003Cli>We also import \u003Ccode>useRuntimeConfig\u003C/code> from \u003Ccode>#app\u003C/code> to access configuration values.\u003C/li>\r\n\u003Cli>We define a \u003Ccode>POCKETBASE_URL\u003C/code> constant as a fallback, but it's best practice to configure this.\u003C/li>\r\n\u003Cli>We declare a \u003Ccode>pb\u003C/code> variable to hold our Pocketbase client instance. This is outside the function to ensure we only create one instance (singleton pattern).\u003C/li>\r\n\u003Cli>The \u003Ccode>usePocketbase\u003C/code> function:\r\n\u003Cul>\r\n\u003Cli>Gets the Pocketbase URL from the Nuxt runtime config (\u003Ccode>config.public.pocketbaseUrl\u003C/code>). This allows you to configure the URL in your \u003Ccode>nuxt.config.ts\u003C/code> file, which is the recommended way to handle environment-specific settings.\u003C/li>\r\n\u003Cli>If \u003Ccode>pb\u003C/code> is null (meaning we haven't created an instance yet), it creates a new \u003Ccode>PocketBase\u003C/code> client with the configured URL.\u003C/li>\r\n\u003Cli>Returns the \u003Ccode>pb\u003C/code> instance.\u003C/li>\r\n\u003C/ul>\r\n\u003C/li>\r\n\u003C/ul>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Configuring the Pocketbase URL in Nuxt\u003C/h2>\r\n\u003Cp>To properly configure the Pocketbase URL, open your \u003Ccode>nuxt.config.ts\u003C/code> file and add the following:\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n\r\nexport default defineNuxtConfig({\r\n\r\n&nbsp; &nbsp; runtimeConfig: {\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; public: {\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pocketbaseUrl: process.env.POCKETBASE_URL || 'http://127.0.0.1:8090',\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; },\r\n\r\n&nbsp; &nbsp; },\r\n\r\n});\r\n\r\n\u003C/code>\u003C/pre>\r\n\u003Cp>This code does a couple of important things:\u003C/p>\r\n\u003Cul>\r\n\u003Cli>It uses \u003Ccode>defineNuxtConfig\u003C/code>, which is the standard way to configure Nuxt 3.\u003C/li>\r\n\u003Cli>It sets the \u003Ccode>pocketbaseUrl\u003C/code> in the \u003Ccode>public\u003C/code> section of \u003Ccode>runtimeConfig\u003C/code>. Anything in the \u003Ccode>public\u003C/code> section is exposed to the client-side code.\u003C/li>\r\n\u003Cli>It uses \u003Ccode>process.env.POCKETBASE_URL\u003C/code> if it's defined (e.g., in an environment variable), otherwise, it defaults to \u003Ccode>http://127.0.0.1:8090\u003C/code>. This is crucial for deployment, as your Pocketbase URL will likely be different in production.\u003C/li>\r\n\u003C/ul>\r\n\u003Cp>\u003Cstrong>Important:\u003C/strong> For production, make sure to set the \u003Ccode>POCKETBASE_URL\u003C/code> environment variable on your server. How you do this depends on your hosting provider (e.g., Netlify, Vercel, a traditional server).\u003C/p>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Using the \u003Ccode>usePocketbase\u003C/code> Composable\u003C/h2>\r\n\u003Cp>Now that we have our composable, we can easily access the Pocketbase client in any Nuxt 3 component, page, or layout.\u003C/p>\r\n\u003Cpre>\u003Ccode>\r\n\r\nimport { usePocketbase } from '@/composables/usePocketbase';\r\n\r\n\r\n\r\nexport default defineComponent({\r\n\r\n&nbsp; &nbsp; async setup() {\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; const pb = usePocketbase();\r\n\r\n\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; // Example: Fetching a collection named \"posts\"\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; try {\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const posts = await pb.collection('posts').getList(1, 20);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log('Posts:', posts);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return { posts };\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; } catch (error) {\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.error('Error fetching posts:', error);\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return { posts: [] }; // Or handle the error as needed\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; }\r\n\r\n&nbsp; &nbsp; },\r\n\r\n});\r\n\r\n\u003C/code>\u003C/pre>\r\n\u003Cp>In this example:\u003C/p>\r\n\u003Cul>\r\n\u003Cli>We import our \u003Ccode>usePocketbase\u003C/code> composable.\u003C/li>\r\n\u003Cli>We call \u003Ccode>usePocketbase()\u003C/code> to get the Pocketbase client instance.\u003C/li>\r\n\u003Cli>We use the client to fetch data from a collection named \"posts\".\u003C/li>\r\n\u003Cli>We handle potential errors using a \u003Ccode>try...catch\u003C/code> block.\u003C/li>\r\n\u003C/ul>\r\n\u003C/section>\r\n\u003Csection>\r\n\u003Ch2>Next Steps\u003C/h2>\r\n\u003Cp>You've now successfully integrated Pocketbase into your Nuxt 3 application and created a reusable composable for accessing the Pocketbase client. In the next part of this tutorial, we'll combine this setup with the caching solution we built in Part 1 to create efficient CRUD (Create, Read, Update, Delete) operations for a blog page, dramatically improving its performance. Stay tuned!\u003C/p>\r\n\u003C/section>\r\n\u003C/article>","crud_cache_yqcpy1_dtyi_HxttXZinOe.webp","2025-05-22 05:18:07.148Z","In this third part of our tutorial, we'll leverage the usePocketbase composable from Part 2 and the caching utility from Part 1 to build a powerful and reusable CRUD (Create, Read, Update, Delete) composable. This composable will not only simplify our data fetching and manipulation but also significantly optimize performance through caching.","ns48fwv61pi7oqh","/2025/05/10/creating-a-reusable-crud-composable-with-caching-in-nuxt-3","Creating a Reusable CRUD Composable with Caching in Nuxt 3","2025-06-12 03:14:19.524Z",1758433573182]